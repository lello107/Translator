quit
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.event_type; row.title; row.tipo
continue
row.tipo
row
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
continue
row.event_type; row.title
row.event_type, row.title
row.event_type
continue
row.event_type
continue
row.event_type
continue
row.event_type
continue
row.event_type
continue
row.event_type
continue
row.event_type
continue
row.event_type
row.title
row.even_type
row
exit
continue
gruppo_commercials.each do |x| puts x.schedule_event_type end 
gruppo_commercials.each do |x| puts x.title ; end 
gruppo_commercials.each do |x| puts x.title end 
gruppo_commercials.each do |x| puts x.title; end 
gruppo_commercials.each do |x| puts x.title 
gruppo_commercials.each do |x| puts x.title
gruppo_commercials.each do |x| puts x.title puts x.schedule_event_type end
gruppo_commercials.each do |x| puts x.title puts x.schedule_event_type; end
gruppo_commercials.each do |x| puts x.title; puts x.schedule_event_type; end
gruppo_commercials.each do |x| puts x.title; puts x.schedule_event_type end
gruppo_commercials.each do |x| puts x.title end
gruppo_commercials.pluck(:title)
gruppo_commercials[0].title
gruppo_commercials[0].class
gruppo_commercials[0]
gruppo_commercials.pluck("schedule_event_type")
gruppo_commercials.class
gruppo_commercials
exit
Timecode.convert_to_frames("00:02:00:00")
Timecode.convert_to_frames("00:02:00:00"
playlist[programma.position-1].tx_duration
playlist[programma.position-1]
programma.tx_id[0]
programma.tx_id
programma
exit
effetto
continue
exit
continue
effetto
effetto["tx_time"]
tx_time
playlist[programma.position-1].event_type.match(/PROG/)
global_template_layer
programma.local_tx_time
continue
exit
global_template_layer.include?("#{layer}")
quit
File.open(file,"wb") { |fi| pl_out.write(fi)}
file = "peppa6.lst"
pl_out.crc32=HarrisV12.calc_crc32(pl_out)
pl_out = HarrisV12::Louthinterface.new(:rows=>pl.lst_rows)
pl.generate_lst_events()
exit
playlist[programma.position-1].event_type.match(/PROG/)
global_template_layer.include?("#{layer}")
programma.local_tx_time
tx_time
effetto
effetto.class
effetto.size
programma
continue
load_same_template
global_template_layer
Timecode.convert_to_frames(load_tx_time)>0
template
load_template
effetto["tx_time"]
effetto
tx_time
playlist[programma.position-1].event_type.match(/PROG/)
global_template_layer
programmaglobal_template_layer
tx_time
programma
global_template_layer
continue
playlist[programma.position-1].event_type.match(/PROG/)
layer
global_template_layer
programma
continue
programma
continue
programma
continue
programma
continue
programma
continue
template
load_template
load_tx_time = Timecode.diff_timecode(load_tx_time,"00:00:02:00")
load_tx_time = Timecode.diff_timecode(load_tx_time, preroll_in) if(Timecode.convert_to_frames(load_tx_time)>0)
load_tx_time = tx_time
loadload_tx_time = tx_time
Timecode.diff_timecode(load_tx_time, preroll_in) if(Timecode.convert_to_frames(load_tx_time)>0)
effetto["tx_time"]
Timecode.diff_timecode(load_tx_time,"00:00:02:00")
load_tx_time
preroll_in
load_tx_time
global_template_layer.include?("#{layer}")
effetto["effect"]["effect_type"]["name"]
effetto
global_template_layer
effetto.effect.effect_type.name
effetto.effect
effetto
global_template_layer
continue
global_template_layer
programma
playlist[programma.position-1].event_type.match(/PROG/)
global_template_layer.include?("#{layer}") 
continue
playlist[programma.position-1].event_type.match(/PROG/) 
global_template_layer.include?("#{layer}") 
global_template_layer
exit
programma.local_tx_time
programma.tx_time
global_template_layer
layer
global_template_layer.include?("#{layer}") 
programma.title
exit
continue
puts "SI" if playlist[programma.position+1].event_type.match(/PROG/)
if(1==1) puts "2" else puts "4" end
end
if(1==1)
puts "ciao"
put "ciao"
if(playlist[programma.position+1].event_type.match(/PROG/));{ puts "trupry_debug
if(1==1) puts "true";}
if(playlist[programma.position+1].event_type.match(/PROG/))
if(playlist[programma.position+1].event_type.match(/PROG/));{ puts "true";}
if(playlist[programma.position+1].event_type.match(/PROG/)){ puts "true";}
if(playlist[programma.position+1].event_type.match(/PROG/)){ puts "true"};
if(playlist[programma.position+1].event_type.match(/PROG/)) puts "true";
if(playlist[programma.position+1].event_type.match(/PROG/)){puts "true"}
if(playlist[programma.position+1].event_type.match(/PROG/))
playlist[programma.position+1].event_type.match(/PROG/)
programma.tx_id[0]
programma.title
continue
programma.title
programm.title
programma.local_tx_time
continue
programma.local_tx_time
programm.local_tx_time
continue
layer
global_template_layer
global_template_layer.include?("#{layer}") 
playlist[programma.position+1].event_type.match(/PROG/)
programma.title
exit
playlist[programma.position+1].event_type
playlist[programma.position+1].event_type.match(/PROG/)
playlist[programma.position+1].event_type.match(/PROG/
playlist
programma.title
programma
continue
all.size
counter
programma.tx_id[0]
continue
playlist[programma.position+1].event_type
programma.tx_id[0]
continue
programma.tx_id[0]
exit
playlist[programma.position+1].event_type
all.size
counter
continue
conitnue
all.size
counter
playlist[programma.position+1].event_type
exit
